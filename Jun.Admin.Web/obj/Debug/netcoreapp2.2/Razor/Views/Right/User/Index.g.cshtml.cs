#pragma checksum "D:\githubcode\Jun.Admin.Core\Jun.Admin.Web\Views\Right\User\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4cf70ace9aa351b30aa9443dc8dd9c6f1fa8b8df"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Right_User_Index), @"mvc.1.0.view", @"/Views/Right/User/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Right/User/Index.cshtml", typeof(AspNetCore.Views_Right_User_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\githubcode\Jun.Admin.Core\Jun.Admin.Web\Views\_ViewImports.cshtml"
using Jun.Admin.Web;

#line default
#line hidden
#line 2 "D:\githubcode\Jun.Admin.Core\Jun.Admin.Web\Views\_ViewImports.cshtml"
using Jun.Admin.Web.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4cf70ace9aa351b30aa9443dc8dd9c6f1fa8b8df", @"/Views/Right/User/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9840a7d7c9409be306e84ce764673a29a860d403", @"/Views/_ViewImports.cshtml")]
    public class Views_Right_User_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 8326, true);
            WriteLiteral(@"<div class=""layui-fluid"">
    <div class=""layui-card"">
        <div class=""layui-form layui-card-header layuiadmin-card-header-auto"">
            <div class=""layui-form-item"">
                <div class=""layui-inline"">
                    <label class=""layui-form-label"">用户名</label>
                    <div class=""layui-input-inline"">
                        <input type=""text"" name=""UserName"" placeholder=""请输入"" autocomplete=""off"" class=""layui-input"">
                    </div>
                </div>
                <div class=""layui-inline"">
                    <label class=""layui-form-label"">姓名</label>
                    <div class=""layui-input-inline"">
                        <input type=""text"" name=""RealName"" placeholder=""请输入"" autocomplete=""off"" class=""layui-input"">
                    </div>
                </div>
                <div class=""layui-inline"">
                    <button class=""layui-btn layuiadmin-btn-list"" lay-submit lay-filter=""LAY-app-contlist-search"">
                   ");
            WriteLiteral(@"     <i class=""layui-icon layui-icon-search layuiadmin-button-btn""></i>
                    </button>
                </div>
            </div>
        </div>

        <div class=""layui-card-body user-body"">
            <div style=""padding-bottom: 10px;"">
                <button class=""layui-btn layuiadmin-btn-list"" data-type=""batchdel"">删除</button>
                <button class=""layui-btn layuiadmin-btn-list"" data-type=""add"">添加</button>
            </div>
            <table id=""user-list"" lay-filter=""user-list""></table>
            <script type=""text/html"" id=""user-toolbar"">
                <a class=""layui-btn layui-btn-xs"" lay-event=""detail""><i class=""layui-icon layui-icon-table""></i>查看</a>
                <a class=""layui-btn layui-btn-normal layui-btn-xs"" lay-event=""edit""><i class=""layui-icon layui-icon-edit""></i>编辑</a>
                <a class=""layui-btn layui-btn-danger layui-btn-xs"" lay-event=""del""><i class=""layui-icon layui-icon-delete""></i>删除</a>
            </script>
        </div>
 ");
            WriteLiteral(@"   </div>
</div>
<script>
    //创建实例  要想数据初始化 这里必须要写
    layui.use(['table', 'layer', 'form'], function () {
        var table = layui.table;
        layer = layui.layer;
        form = layui.form;

        table.render({
            elem: '#user-list'
            , url: '/user/getuserlist' //数据接口
            , page: true //开启分页
            , cols: [[ //表头
                { checkbox: true },
                { field: 'ID', title: 'ID', width: 120, hide: true, fixed: 'left' }
                , { field: 'UserName', title: '用户名', width: 130 }
                , { field: 'RealName', title: '姓名', width: 80 }
                , { field: 'Age', title: '年龄', width: 80 }
                , { field: 'Email', title: '邮箱地址', width: 177 }
                , { field: 'Phone', title: '手机号', width: 150 }
                , { field: 'CreateTime', title: '创建时间', width: 180, sort: true }
                , { fixed: 'right', title: ""操作"", align: 'center', toolbar: '#user-toolbar' }
            ]]
        });

 ");
            WriteLiteral(@"       //搜索 ----------------------------------------------- Begin-----------------------------------------------------------
        var $ = layui.$, active =
        {
            reload: function () {
                var demoReload = $('#demoReload').val();//获取输入框的值
                //执行重载
                table.reload('test',
                    {
                        page:
                        {
                            curr: 1 //重新从第 1 页开始
                        }
                        , where: { name: demoReload }//这里传参  向后台
                        , url: '/Home/Temp_search'//后台做模糊搜索接口路径
                        , method: 'post'
                    });
            },
            batchdel: function () {
                var checkStatus = table.checkStatus('user-list')
                    , checkData = checkStatus.data; //得到选中的数据

                if (checkData.length === 0) {
                    return layer.msg('请选择数据');
                }

                layer.confirm('确");
            WriteLiteral(@"定删除吗？', function (index) {

                    //执行 Ajax 后重载
                    /*
                    admin.req({
                      url: 'xxx'
                      //,……
                    });
                    */
                    table.reload('user-list');
                    layer.msg('已删除');
                });
            },
            add: function () {
                layer.open(
                    {
                        type: 2,
                        title: '新增',
                        //skin: 'layui-layer-molv',
                        shadeClose: false,
                        //shade: 0.8,
                        btn: ['保存', '取消'],
                        area: ['880px', '350px'],
                        content: ['/user/insert', 'no'],//跳转的页面
                        //cancel: function (index) {
                        //    $("".layui-laypage-btn"").click();//这里用于关闭Open时触发回调函数  刷新父页面数据  一定要引入Jquery
                        //}
                        ye");
            WriteLiteral(@"s: function (index, layero) {
                            //do something
                            alert(""确定"");
                            layer.close(index); //如果设定了yes回调，需进行手工关闭
                        }

                    });
            }
        };
        //这个是用于创建点击事件的实例
        $('.user-body .layui-btn').on('click', function () {
            var type = $(this).data('type');
            active[type] ? active[type].call(this) : '';
        });
        //搜索 ----------------------------------------------- End-----------------------------------------------------------






        //监听工具条 ----------------------------------------------- Begin-----------------------------------------------------------
        table.on('tool(user-list)', function (obj) {    //注：tool是工具条事件名，test是table原始容器的属性 lay-filter=""对应的值""
            var data = obj.data; //获得当前行数据
            var layEvent = obj.event; //获得 lay-event 对应的值（也可以是表头的 event 参数对应的值）
            var tr = obj.tr; //获得当前行 tr 的DOM对象
  ");
            WriteLiteral(@"          if (layEvent == 'edit') {
                layer.open(
                    {
                        type: 2,
                        title: '编辑',
                        //skin: 'layui-layer-molv',
                        shadeClose: false,
                        //shade: 0.8,
                        btn: ['保存', '取消'],
                        area: ['880px', '350px'],
                        content: ['/user/update','no'],//跳转的页面
                        //cancel: function (index) {
                        //    $("".layui-laypage-btn"").click();//这里用于关闭Open时触发回调函数  刷新父页面数据  一定要引入Jquery
                        //}
                        yes: function (index, layero) {
                            //do something
                            alert(""确定"");
                            layer.close(index); //如果设定了yes回调，需进行手工关闭
                        }

                    });
            }
            else if (layEvent == ""detail"")
            {
                layer.open(
          ");
            WriteLiteral(@"          {
                        type: 2,
                        title: '详情',
                        //skin: 'layui-layer-molv',
                        shadeClose: false,
                        //shade: 0.8,
                        //btn: ['保存', '取消'],
                        area: ['800px', '350px'],
                        content: ['/user/detail', 'no'],//跳转的页面
                      
                    });
            }
            else//删除数据
            {
                $.post("""", { id: data.UserId }, function (ret) {
                    if (ret.code == ""1"") {
                        layer.msg(ret.msg, { icon: 1, time: 1500 }, function () {
                            obj.del(); //删除对应行（tr）的DOM结构，并更新缓存
                            //$("".layui-laypage-btn"").click();
                        });
                    } else {
                        layer.msg(ret.msg, { icon: 2, time: 1500 });
                    }
                });

            }
        });

        //监听");
            WriteLiteral("工具条 ----------------------------------------------- ENd-----------------------------------------------------------\r\n    });\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
